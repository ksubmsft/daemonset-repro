apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cifs-credits-diag
  namespace: default
spec:
  selector:
    matchLabels:
      name: cifs-credits-diag
  template:
    metadata:
      labels:
        name: cifs-credits-diag
    spec:
      containers:
        - name: cifs-credits-diag
          image: alpine:latest
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - |
                  disk_usage=$(df -h / | awk '{print $5}' | tail -n 1)
                  disk_usage_percent=${disk_usage%%%}
                  if [[ $disk_usage_percent > 50 ]]; then exit 199; fi
            initialDelaySeconds: 5
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","while pkill -SIGURG -f bash; do sleep 1; done"]
          command:
            - nsenter
            - --target
            - "1"
            - --mount
            - --uts
            - --ipc
            - --pid
            - --
            - bash
            - -c
            - |
                #!/bin/bash
                if ! command -v trace-cmd &> /dev/null;
                then
                 # If trace-cmd is not installed, attempt to install it
                    echo "trace-cmd is not installed. Attempting to install..."
                 # Install trace-cmd using apt-get
                    DEBIAN_FRONTEND=noninteractive apt-get install -y trace-cmd

                 # Check if installation was successful
                    if ! command -v trace-cmd &> /dev/null
                    then
                        echo "Error: Failed to install trace-cmd." >&2
                        exit 201
                    else
                        echo "trace-cmd is now installed."
                    fi
                else
                # If trace-cmd is already installed, print a message indicating that it's installed
                    echo "trace-cmd is already installed."
                fi

                ## ================ USER PARAMS ====================== ##
                LOGDIR="/tmp/cc_logs"          # directory in which we collect logs
                TRACE_CMD_BUFSZ_BYTES=$((16 * 1024 * 1024)) # 16 MB; per-cpu buffer size for trace-cmd
                CIFS_CREDIT_LOW_WATER_MARK=20
                CIFS_OTW_MID_MISMATCH_MAX=3
                DETECTION_INTERVAL_SEC=10   # Dump "frequent" statistics once in this interval
                COLLECTION_INTERVAL_MULT=30 # Dump "infrequent" statistics once in (DETECTION_INTERVAL_SEC * this mult)
                ## ========== DO NOT MODIFY BELOW THIS LINE ========== ##

                ## == Files that we create/expect ==
                STOP_COLLECTION_MARKER="/tmp/cifs_credit.stop"
                INITIAL_INFO="$LOGDIR/initial_system_info"
                ERR_LOG="$LOGDIR/errors"
                DEBUGDATA_TMP="$LOGDIR/cifs_debug_data.tmp"
                DEBUGDATA_OUT="$LOGDIR/cifs_debug_data"
                CIFS_TRACE_DAT="$LOGDIR/trace.dat"
                CIFS_TRACE_OUT="$LOGDIR/cifs_trace"
                CIFS_MID_MISMATCH_LOG="$LOGDIR/cifs_otw_mid_mismatch"
                STATS_OUT="$LOGDIR/cifs_stats_out"
                DMESG_OUT="$LOGDIR/cifs_dmesg"
                CREDIT_HIST="$LOGDIR/cifs_credit_history"
                UNIQUE_HOSTNAMES="$LOGDIR/unique_sessions_hostnames"
                ##

                INITIAL_UPTIME=0
                LOG_ROTATE_COUNT=0

                am_i_root() {
                    local euid=$(id -u)
                    if [ "$euid" -ne 0 ];
                    then
                        echo "Please run $0 as root"
                        exit
                    fi
                }

                rotate_logdir() {
                    #
                    # Archive current logdir
                    # Nuke existing log files
                    #
                    datestr=$(date -u +'%Y%b%d-%H-%M-%S')
                    tarball_name="$(hostname)_${datestr}_UTC_logs_${LOG_ROTATE_COUNT}.tgz"
                    temp_logdir="${LOGDIR}_${datestr}"
                    cp -r $LOGDIR "${temp_logdir}"
                    echo "Rotate: ${tarball_name}"
                    tar czf "/tmp/${tarball_name}" $temp_logdir
                    rm -fR $temp_logdir
                    LOG_ROTATE_COUNT=$((LOG_ROTATE_COUNT + 1))

                    rm -fR $LOGDIR;
                    mkdir $LOGDIR;

                    #Get rid of tarballs that are older than 3 days
                    find /tmp -type f -name "$(hostname)*.tgz" -mtime +3 -exec rm -f {} \;
                }

                setup_logdir() {
                    if [[ -d $LOGDIR ]]; then
                        rotate_logdir
                    fi
                    if [[ ! -d $LOGDIR ]]; then
                        mkdir $LOGDIR
                    fi

                    local err="$?"
                    if [[ $err != 0 ]]; then
                        echo "Error creating logdir: $err" |tee $ERR_LOG
                        exit 1
                    fi
                }

                setup_debug() {
                    # Get rid of the initial contents of dmesg. We're not really interested in them.
                    # In any case, they should've been flushed down to /var/log/(kern.log|messages).
                    dmesg -c -T > /dev/null

                    echo 'module cifs +p'   > /sys/kernel/debug/dynamic_debug/control
                    echo 'file fs/cifs* +p' > /sys/kernel/debug/dynamic_debug/control
                    ## Disabling cifsFYI to avoid polluting syslog
                    # echo 7 > /proc/fs/cifs/cifsFYI

                    trace-cmd reset
                    trace-cmd start -e cifs -b TRACE_CMD_BUFSZ_BYTES
                }

                check_diagcmds_present() {
                    which trace-cmd > /dev/null;
                    if [ $? == 1 ]; then
                        echo "trace-cmd is not installed"
                        exit 1
                    fi
                }

                check_space_consumption() {
                    # Set the number of measurements to keep for calculating growth rate
                    num_measurements=10
                    # Get the initial size of the root filesystem
                    initial_size=$(df -h / | awk 'NR==2{print $3}')

                    # Initialize an array to hold the previous measurements
                    measurements=($initial_size)

                    # Loop until the root filesystem utilization is at or above 50%
                    # while true; do
                    # Wait for the specified interval
                    #   sleep $interval

                    # Get the current size of the root filesystem
                    current_size=$(df -h / | awk 'NR==2{print $3}')

                    # Calculate the growth rate over the last 10 minutes
                    num_measurements=${#measurements[@]}
                    if (( num_measurements < 2 )); then
                          growth_rate="N/A"
                    else
                          growth=$((${measurements[$num_measurements-1]} - ${measurements[$num_measurements-2]}))
                          growth_rate=$(echo "scale=2; $growth/$interval" | bc)
                          growth_rate="$growth_rate MB/s"
                    fi

                    # Write the current size and growth rate to a file
                    echo "$(date '+%Y-%m-%d %H:%M:%S'),$current_size,$growth_rate" >> disk_usage.csv

                    # Check if the root filesystem utilization is above 50%
                    usage=$(df -h / | awk 'NR==2{print $5}' | sed 's/%//')
                    if (( usage >= 50 )); then
                          echo "Error: Root filesystem utilization is above 50%. Stopping script."
                          exit 198
                    fi

                    # Add the current measurement to the array
                    measurements+=($current_size)
                    # Remove the oldest measurement if the array has reached its maximum size
                    if (( ${#measurements[@]} > $num_measurements )); then
                          measurements=("${measurements[@]:1}")
                    fi
                    #done
                }

                collect_initial_info() {
                    INITIAL_UPTIME=$(awk -F[\ \.] '{print $1}' /proc/uptime)

                    date -u;
                    echo "hostname $(hostname) running $(uname -smr)"
                    echo "/proc/uptime: $(cat /proc/uptime)";
                    echo "uptime: $(uptime)";
                    echo "last reboot info :"
                    last reboot;
                    egrep 'CIFS Version' /proc/fs/cifs/DebugData
                    mount.cifs -V;
                }

                cleanup_markers() {
                    if [[ -f $STOP_COLLECTION_MARKER ]]; then
                        rm -f $STOP_COLLECTION_MARKER;
                    fi
                }

                setup() {
                    cleanup_markers;
                    setup_logdir;
                    check_diagcmds_present |tee $ERR_LOG
                    setup_debug;
                    collect_initial_info > $INITIAL_INFO ;

                    trap stop_collection_and_exit SIGINT;
                    trap stop_collection_and_exit SIGURG;

                    echo "-----------------------------------------------------------------------------"
                    echo "Collecting CIFS credit and related stats ($(date -u +'%Y %b %d %H:%M:%S UTC'))"
                    echo "To stop log collection, please hit Ctrl-C, or run \"kill -9 $$\" as root"
                    echo "-----------------------------------------------------------------------------"
                }

                collect_infrequent_stats() {
                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $STATS_OUT
                    echo >> $STATS_OUT
                    cat /proc/fs/cifs/Stats >> $STATS_OUT
                    echo "===" >> $STATS_OUT

                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $DEBUGDATA_OUT
                    echo >> $DEBUGDATA_OUT
                    cat /proc/fs/cifs/DebugData >> $DEBUGDATA_OUT
                    echo "===" >> $DEBUGDATA_OUT

                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $DMESG_OUT
                    echo >> $DMESG_OUT
                    dmesg -c -T >> $DMESG_OUT
                    echo "===" >> $DMESG_OUT
                }

                collect_stats() {
                    wcnt=$1

                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    cat /proc/fs/cifs/DebugData > $DEBUGDATA_TMP

                    #
                    # Check if the no. of requests on the wire matches the MID
                    # count for a given connection.
                    #
                    # The mid_count needs to be adjusted below because it is
                    # effectively the number of lines between, and including,
                    # the `MID:` and the `--` - hence:
                    #
                    #   (i) The mid_count includes the leading and trailing
                    #       markers, which should not contribute to the count.
                    #       We subtract 2 from the count to adjust for this.
                    #
                    #   (ii) After subtracting 2 from it, the mid_count is now
                    #        the number of lines between the starting and
                    #        ending markers. There are effectively two lines for
                    #        each MID (every MID line is followed by a blank
                    #        line) -- so we halve the count.
                    #
                    # In addition, log the credit count as well.
                    #
                    awk -v cur_date_utc="$(date -u)"                                                  \
                        -v cifs_credits_lwm="$CIFS_CREDIT_LOW_WATER_MARK"                             \
                    '                                                                                 \
                      BEGIN {                                                                         \
                        conn_id = -1;                                                                 \
                        srv_hostname = "";                                                            \
                        requests_on_wire = 0;                                                         \
                        mid_count = 0;                                                                \
                        credits = 0;                                                                  \
                      }                                                                               \
                                                                                                      \
                      /^-{51}/ {                                                                      \
                        next;                                                                         \
                        # decoration at the top of DebugData                                          \
                      }                                                                               \
                                                                                                      \
                      /^[0-9]+) ConnectionId/ {                                                       \
                        conn_id = $3;                                                                 \
                        srv_hostname = $5;                                                            \
                      }                                                                               \
                                                                                                      \
                      /Number of credits/ {                                                           \
                        credits = $4;                                                                 \
                      }                                                                               \
                                                                                                      \
                      /Req on Wire/ {                                                                 \
                        otw = $NF;                                                                    \
                      }                                                                               \
                                                                                                      \
                      /MIDs:/,/^--/ {                                                                 \
                        mid_count++;                                                                  \
                      }                                                                               \
                                                                                                      \
                      /^--/ {                                                                         \
                        mid_count -= 2;                                                               \
                        mid_count /= 2;                                                               \
                                                                                                      \
                        if (conn_id == -1) {                                                          \
                          next;                                                                       \
                        }                                                                             \
                                                                                                      \
                        printf("%s %s_%s credits: %d on the wire: %d MID_count: %d",                  \
                            cur_date_utc,                                                             \
                            conn_id,                                                                  \
                            srv_hostname,                                                             \
                            credits,                                                                  \
                            requests_on_the_wire,                                                     \
                            mid_count);                                                               \
                                                                                                      \
                        if ((requests_on_wire > 0) && (mid_count == 0)) {                             \
                          printf(" MID_MISMATCH");                                                    \
                        }                                                                             \
                                                                                                      \
                        if (credits <= cifs_credits_lwm) {                                            \
                          printf(" LOW_CREDIT");                                                      \
                        }                                                                             \
                                                                                                      \
                        printf("\n");                                                                 \
                                                                                                      \
                        requests_on_wire = 0;                                                         \
                        mid_count = 0;                                                                \
                        conn_id = -1;                                                                 \
                        srv_hostname = "";                                                            \
                      }                                                                               \
                    ' $DEBUGDATA_TMP >> $CREDIT_HIST
                    rm -f $DEBUGDATA_TMP

                    collect_infrequent_stats_trigger=$((wcnt % COLLECTION_INTERVAL_MULT))
                    if (( $collect_infrequent_stats_trigger == 0 ))
                    then
                        collect_infrequent_stats
                    fi
                }


                check_trigger_conditions() {
                    # ===
                    # Check to see if:
                    #
                    # (1) There is a mismatch between the inflight request count
                    # and the no. of MIDs inflight, enough times in a row,
                    #
                    # _OR_
                    #
                    # (2) The credit count goes below a certain threshold, and
                    # stays low, enough times in a row
                    #
                    # ===
                    local logs_need_rotation=0

                    # check for consecutive occurrences
                    awk -v mid_mismatch_threshold="$CIFS_OTW_MID_MISMATCH_MAX" \
                        -v low_credit_threshold="$CIFS_CREDIT_LOW_WATER_MARK"  \
                    ' BEGIN {                                                  \
                          delete mid_mismatch_count[0];                        \
                          delete low_credit_count[0];                          \
                      }                                                        \
                                                                               \
                      /MID_MISMATCH/ {                                         \
                          mid_mismatch_count[$7]++;                            \
                          for (hs in mid_mismatch_count) {                     \
                            if (mid_mismatch_count[hs] > mid_mismatch_threshold) { \
                              printf("MID MISMATCH FOUND: %s\n", $0);          \
                            }                                                  \
                          }                                                    \
                      }                                                        \
                                                                               \
                      !/MID_MISMATCH/ {                                        \
                          mid_mismatch_count[$7] = 0;                          \
                      }                                                        \
                                                                               \
                      /LOW_CREDIT/ {                                           \
                          low_credit_count[$7]++;                              \
                          for (hs in low_credit_count) {                       \
                            if (low_credit_count[hs] <= low_credit_threshold) {\
                              printf("LOW CREDIT FOUND: %s\n", $0);            \
                            }                                                  \
                          }                                                    \
                      }                                                        \
                                                                               \
                      !/LOW_CREDIT/ {                                          \
                          low_credit_count[$7] = 0;                            \
                      }
                    ' $CREDIT_HIST >> $CIFS_MID_MISMATCH_LOG

                    #XXX fix up the error message properly
                    if [[ ! -z $CIFS_MID_MISMATCH_LOG ]];
                    then
                      logs_need_rotation=1
                      logger -p local0.warning "CIFS_CREDIT_ALERT: MID count mismatch on $hostsession"

                      echo "--> Stopping log collection"
                      teardown
                      exit 1
                    fi

                    if ((logs_need_rotation == 1)); then
                        rotate_logdir
                        logs_need_rotation=0;
                    fi
                }

                collect_periodic_stats() {
                    wakeup_count=0
                    while true
                    do
                        echo "Wakeup to collect stats [$wakeup_count]"
                        check_space_consumption;

                        if [ -e $STOP_COLLECTION_MARKER ]; then
                            rm -f $STOP_COLLECTION_MARKER;
                            break
                        fi

                        collect_stats $wakeup_count;
                        check_trigger_conditions;
                        wakeup_count=$((wakeup_count + 1))

                        sleep $DETECTION_INTERVAL_SEC;
                    done
                }

                kill_trace_cmd_gen_report() {
                    date >> "$LOGDIR/stop_attempts"
                    trace-cmd stop
                    trace-cmd extract -o $CIFS_TRACE_DAT
                    trace-cmd report -i $CIFS_TRACE_DAT >> $CIFS_TRACE_OUT
                }

                teardown_debug() {
                    kill_trace_cmd_gen_report

                    echo 0 > /proc/fs/cifs/cifsFYI;
                    echo 'file fs/cifs* -p' > /sys/kernel/debug/dynamic_debug/control
                    echo 'module cifs -p' > /sys/kernel/debug/dynamic_debug/control
                }

                teardown_errlog() {
                    #
                    # If the error log is empty, get rid of it
                    #
                    if [ ! -s $ERR_LOG ]; then
                        rm $ERR_LOG;
                    fi
                }

                stop_collection_and_exit() {
                    echo "Received Ctrl-C, stopping log collection and collating logs"
                    touch $STOP_COLLECTION_MARKER
                }

                teardown() {
                    collect_infrequent_stats;

                    teardown_debug;
                    teardown_errlog;

                    cur_tarball_prefix="$(hostname)_$(date -u +'%Y%b%d-%H-%M-%S')_UTC_logs"
                    tarball_name="${cur_tarball_prefix}_${LOG_ROTATE_COUNT}.tgz"
                    tar czf "/tmp/$tarball_name" $LOGDIR

                    composite_tarball_name="COMPOSITE_${cur_tarball_prefix}.tgz"
                    tar czf "/tmp/$composite_tarball_name" "/tmp/$(hostname)_*.tgz" "$LOGDIR"
                    echo ""
                    echo "==> Created composite tarball $composite_tarball_name"
                    echo "Please send a copy of this tarball to Microsoft support for further analysis"
                    echo "-----------------------------------------------------------------------------"
                    rm -f "/tmp/$(hostname)*"

                    if [[ -d $LOGDIR ]]; then
                      rm -fR $LOGDIR
                    fi
                }

                main() {
                    am_i_root
                    setup

                    collect_periodic_stats

                    teardown
                }

                main


          securityContext:
            privileged: true
      hostPID: true
